const AuthUtils = require('../src/utils/authUtils');

/**
 * Script para testar a funcionalidade de autentica√ß√£o
 */
async function testPasswordFunctionality() {
    console.log('üß™ Testando funcionalidade de autentica√ß√£o...\n');

    try {
        // Teste 1: Valida√ß√£o de for√ßa da senha
        console.log('1. Testando valida√ß√£o de for√ßa da senha:');
        
        const weakPassword = '123';
        const weakResult = AuthUtils.validatePasswordStrength(weakPassword);
        console.log(`   Senha fraca "${weakPassword}":`, weakResult.isValid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida');
        if (!weakResult.isValid) {
            console.log(`   Erros: ${weakResult.errors.join(', ')}`);
        }

        const strongPassword = 'MinhaSenh@123';
        const strongResult = AuthUtils.validatePasswordStrength(strongPassword);
        console.log(`   Senha forte "${strongPassword}":`, strongResult.isValid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida');

        // Teste 2: Hash de senha
        console.log('\n2. Testando cria√ß√£o de hash:');
        const testPassword = 'TestPassword123!';
        const hashedPassword = await AuthUtils.hashPassword(testPassword);
        console.log(`   Hash gerado: ${hashedPassword.substring(0, 30)}...`);

        // Teste 3: Compara√ß√£o de senhas
        console.log('\n3. Testando compara√ß√£o de senhas:');
        
        const correctComparison = await AuthUtils.comparePasswords(testPassword, hashedPassword);
        console.log(`   Senha correta: ${correctComparison ? '‚úÖ Match' : '‚ùå No match'}`);

        const incorrectComparison = await AuthUtils.comparePasswords('WrongPassword', hashedPassword);
        console.log(`   Senha incorreta: ${incorrectComparison ? '‚ùå Match (ERRO!)' : '‚úÖ No match'}`);

        // Teste 4: Prote√ß√£o contra timing attacks
        console.log('\n4. Testando prote√ß√£o contra timing attacks:');
        console.time('   Dummy comparison time');
        await AuthUtils.dummyPasswordCompare();
        console.timeEnd('   Dummy comparison time');

        // Teste 5: Casos extremos
        console.log('\n5. Testando casos extremos:');
        
        try {
            await AuthUtils.hashPassword('');
            console.log('   Senha vazia: ‚ùå Deveria ter falhado');
        } catch (error) {
            console.log('   Senha vazia: ‚úÖ Rejeitada corretamente');
        }

        const invalidHashComparison = await AuthUtils.comparePasswords('test', 'invalid_hash');
        console.log(`   Hash inv√°lido: ${invalidHashComparison ? '‚ùå Match (ERRO!)' : '‚úÖ No match'}`);

        console.log('\nüéâ Todos os testes conclu√≠dos!');

    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error);
    }
}

// Executa os testes se este arquivo for executado diretamente
if (require.main === module) {
    testPasswordFunctionality();
}

module.exports = testPasswordFunctionality;