# Script de Inicializa√ß√£o do Projeto Connexa
# Execute este script no PowerShell

Write-Host "üöÄ Iniciando Projeto Connexa..." -ForegroundColor Green
Write-Host ""

# Definir diret√≥rio base (usar diret√≥rio atual do script)
$BaseDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$FrontendDir = Join-Path $BaseDir "frontend"

Write-Host "üìÅ Verificando diret√≥rios..." -ForegroundColor Yellow
Write-Host "   Base: $BaseDir" -ForegroundColor Gray

if (-not (Test-Path $BaseDir)) {
    Write-Host "‚ùå Diret√≥rio base n√£o encontrado: $BaseDir" -ForegroundColor Red
    exit 1
}

if (-not (Test-Path $FrontendDir)) {
    Write-Host "‚ùå Diret√≥rio frontend n√£o encontrado: $FrontendDir" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Diret√≥rios encontrados!" -ForegroundColor Green
Write-Host ""

# Fun√ß√£o para matar processos nas portas
function Kill-ProcessOnPort {
    param($Port)
    
    Write-Host "üîç Verificando porta $Port..." -ForegroundColor Yellow
    
    try {
        $processes = netstat -ano | Select-String ":$Port "
        if ($processes) {
            Write-Host "‚ö†Ô∏è  Porta $Port est√° em uso. Liberando..." -ForegroundColor Yellow
            
            $pids = $processes | ForEach-Object {
                if ($_.ToString() -match '\s+(\d+)\s*$') {
                    $matches[1]
                }
            } | Where-Object { $_ } | Sort-Object -Unique
            
            foreach ($pid in $pids) {
                try {
                    $process = Get-Process -Id $pid -ErrorAction SilentlyContinue
                    if ($process) {
                        Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
                        Write-Host "‚úÖ Processo $pid ($($process.ProcessName)) finalizado" -ForegroundColor Green
                    }
                } catch {
                    Write-Host "‚ö†Ô∏è  N√£o foi poss√≠vel finalizar processo $pid" -ForegroundColor Yellow
                }
            }
        } else {
            Write-Host "‚úÖ Porta $Port est√° livre" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è  Erro ao verificar porta $Port" -ForegroundColor Yellow
    }
    }
}

# Liberar portas
Kill-ProcessOnPort 3000
Kill-ProcessOnPort 3001
Kill-ProcessOnPort 3002

Write-Host ""
Write-Host "üì¶ Instalando depend√™ncias..." -ForegroundColor Yellow

# Instalar depend√™ncias do backend
Write-Host "Backend..." -ForegroundColor Cyan
Set-Location $BaseDir
if (-not (Test-Path "node_modules")) {
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erro ao instalar depend√™ncias do backend" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ Depend√™ncias do backend j√° instaladas" -ForegroundColor Green
}

# Instalar depend√™ncias do frontend
Write-Host "Frontend..." -ForegroundColor Cyan
Set-Location $FrontendDir
if (-not (Test-Path "node_modules")) {
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erro ao instalar depend√™ncias do frontend" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ Depend√™ncias do frontend j√° instaladas" -ForegroundColor Green
}

Write-Host ""
Write-Host "üîß Criando arquivos de configura√ß√£o..." -ForegroundColor Yellow

# Criar .env do backend se n√£o existir
$BackendEnv = Join-Path $BaseDir ".env"
if (-not (Test-Path $BackendEnv)) {
    @"
# Configura√ß√µes do Backend
PORT=3001
JWT_SECRET=connexa-super-secret-jwt-key-change-in-production-$(Get-Random)
JWT_EXPIRES_IN=24h

# Configura√ß√µes do Banco
DB_PATH=./database/connexa.db

# Configura√ß√µes de Seguran√ßa
BCRYPT_ROUNDS=12
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX=100
"@ | Out-File -FilePath $BackendEnv -Encoding UTF8
    Write-Host "‚úÖ Arquivo .env do backend criado" -ForegroundColor Green
}

# Criar .env do frontend se n√£o existir
$FrontendEnv = Join-Path $FrontendDir ".env"
if (-not (Test-Path $FrontendEnv)) {
    @"
# Configura√ß√µes de Criptografia Frontend
REACT_APP_ENCRYPTION_KEY=connexa-encryption-key-change-in-production-$(Get-Random)
REACT_APP_HMAC_KEY=connexa-hmac-key-change-in-production-$(Get-Random)

# URL da API
REACT_APP_API_URL=http://localhost:3001
"@ | Out-File -FilePath $FrontendEnv -Encoding UTF8
    Write-Host "‚úÖ Arquivo .env do frontend criado" -ForegroundColor Green
}

Write-Host ""
Write-Host "üöÄ Iniciando servi√ßos..." -ForegroundColor Green

# Iniciar backend em nova janela
Write-Host "Iniciando Backend na porta 3001..." -ForegroundColor Cyan
Set-Location $BaseDir
$backendCommand = "cd '$BaseDir'; Write-Host 'üñ•Ô∏è  Backend Connexa' -ForegroundColor Green; npm start"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $backendCommand

# Aguardar backend iniciar
Write-Host "‚è≥ Aguardando backend inicializar..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# Iniciar frontend em nova janela
Write-Host "Iniciando Frontend na porta 3002..." -ForegroundColor Cyan
Set-Location $FrontendDir
$frontendCommand = "cd '$FrontendDir'; `$env:PORT='3002'; Write-Host 'üåê Frontend Connexa' -ForegroundColor Blue; npm start"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $frontendCommand

Write-Host ""
Write-Host "‚úÖ Projeto inicializado com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üåê URLs dispon√≠veis:" -ForegroundColor Yellow
Write-Host "   Frontend: http://localhost:3002" -ForegroundColor Cyan
Write-Host "   Backend:  http://localhost:3001" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìù Logs:" -ForegroundColor Yellow
Write-Host "   - Backend: Nova janela PowerShell aberta" -ForegroundColor Gray
Write-Host "   - Frontend: Nova janela PowerShell aberta" -ForegroundColor Gray
Write-Host ""
Write-Host "üõë Para parar os servi√ßos:" -ForegroundColor Yellow
Write-Host "   - Feche as janelas do PowerShell" -ForegroundColor Gray
Write-Host "   - Ou use Ctrl+C em cada terminal" -ForegroundColor Gray
Write-Host ""

# Aguardar um pouco e abrir navegador
Start-Sleep -Seconds 5
Write-Host "üåê Abrindo navegador..." -ForegroundColor Green
Start-Process "http://localhost:3002"

Write-Host ""
Write-Host "üéâ Projeto Connexa est√° rodando!" -ForegroundColor Green
Write-Host "Pressione qualquer tecla para finalizar este script..." -ForegroundColor Yellow
Read-Host