# Script de Diagn√≥stico do Connexa
# Identifica problemas de conex√£o e configura√ß√£o

Write-Host "üîç DIAGN√ìSTICO CONNEXA - Investigando EER_CONNECTION_REFUSED" -ForegroundColor Yellow
Write-Host "=================================================================" -ForegroundColor Gray
Write-Host ""

$BaseDir = Split-Path -Parent $MyInvocation.MyCommand.Path

# 1. Verificar processos MySQL rodando
Write-Host "1. üîç Verificando processos MySQL..." -ForegroundColor Cyan
try {
    $mysqlProcesses = Get-Process | Where-Object { $_.ProcessName -like "*mysql*" -or $_.ProcessName -like "*mariadb*" }
    if ($mysqlProcesses) {
        Write-Host "‚ö†Ô∏è  Processos MySQL encontrados:" -ForegroundColor Yellow
        $mysqlProcesses | ForEach-Object {
            Write-Host "   - $($_.ProcessName) (PID: $($_.Id))" -ForegroundColor Gray
        }
        Write-Host "   Isso pode estar causando conflitos!" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Nenhum processo MySQL rodando" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è  Erro ao verificar processos MySQL" -ForegroundColor Yellow
}

Write-Host ""

# 2. Verificar portas ocupadas
Write-Host "2. üîç Verificando portas importantes..." -ForegroundColor Cyan
$ports = @(3001, 3002, 3306, 5432)
foreach ($port in $ports) {
    try {
        $connection = Test-NetConnection -ComputerName localhost -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
        if ($connection) {
            $process = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
            if ($process) {
                $processInfo = Get-Process -Id $process[0].OwningProcess -ErrorAction SilentlyContinue
                Write-Host "   Porta $port: ‚úÖ OCUPADA por $($processInfo.ProcessName)" -ForegroundColor Green
            } else {
                Write-Host "   Porta $port: ‚úÖ OCUPADA" -ForegroundColor Green
            }
        } else {
            Write-Host "   Porta $port: ‚≠ï LIVRE" -ForegroundColor Gray
        }
    } catch {
        Write-Host "   Porta $port: ‚ùì DESCONHECIDO" -ForegroundColor Yellow
    }
}

Write-Host ""

# 3. Verificar vari√°veis de ambiente problem√°ticas
Write-Host "3. üîç Verificando vari√°veis de ambiente..." -ForegroundColor Cyan
$envVars = @("DATABASE_URL", "DB_HOST", "DB_USER", "DB_PASSWORD", "MYSQL_HOST", "MYSQL_USER", "MYSQL_PASSWORD")
$foundEnvVars = @()

foreach ($var in $envVars) {
    $value = [Environment]::GetEnvironmentVariable($var)
    if ($value) {
        $foundEnvVars += "$var = $value"
    }
}

if ($foundEnvVars.Count -gt 0) {
    Write-Host "‚ö†Ô∏è  Vari√°veis de ambiente de banco encontradas:" -ForegroundColor Yellow
    $foundEnvVars | ForEach-Object {
        Write-Host "   - $_" -ForegroundColor Gray
    }
    Write-Host "   Isso pode estar interferindo!" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Nenhuma vari√°vel de ambiente de banco problem√°tica" -ForegroundColor Green
}

Write-Host ""

# 4. Verificar arquivos de configura√ß√£o
Write-Host "4. üîç Verificando configura√ß√µes do projeto..." -ForegroundColor Cyan

# Backend
$backendDb = Join-Path $BaseDir "backend\database.js"
if (Test-Path $backendDb) {
    $content = Get-Content $backendDb -Raw
    if ($content -match "mysql|MySQL") {
        Write-Host "‚ö†Ô∏è  Configura√ß√£o MySQL encontrada no backend/database.js" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Backend configurado para SQLite" -ForegroundColor Green
    }
} else {
    Write-Host "‚ùå Arquivo backend/database.js n√£o encontrado" -ForegroundColor Red
}

# Frontend .env
$frontendEnv = Join-Path $BaseDir "frontend\.env"
if (Test-Path $frontendEnv) {
    $content = Get-Content $frontendEnv -Raw
    if ($content -match "mysql|MySQL|3306") {
        Write-Host "‚ö†Ô∏è  Configura√ß√£o MySQL encontrada no frontend/.env" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Frontend configurado corretamente" -ForegroundColor Green
    }
} else {
    Write-Host "‚ö†Ô∏è  Arquivo frontend/.env n√£o encontrado" -ForegroundColor Yellow
}

Write-Host ""

# 5. Testar conectividade b√°sica
Write-Host "5. üîç Testando conectividade..." -ForegroundColor Cyan

# Testar backend
try {
    $backendTest = Invoke-WebRequest -Uri "http://localhost:3001" -UseBasicParsing -TimeoutSec 3 -ErrorAction Stop
    Write-Host "‚úÖ Backend respondendo na porta 3001" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Backend n√£o responde na porta 3001" -ForegroundColor Red
    Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
}

# Testar frontend
try {
    $frontendTest = Invoke-WebRequest -Uri "http://localhost:3002" -UseBasicParsing -TimeoutSec 3 -ErrorAction Stop
    Write-Host "‚úÖ Frontend respondendo na porta 3002" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Frontend n√£o responde na porta 3002" -ForegroundColor Red
    Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""

# 6. Verificar logs recentes
Write-Host "6. üîç Sugest√µes de resolu√ß√£o..." -ForegroundColor Cyan
Write-Host ""
Write-Host "üìã POSS√çVEIS CAUSAS DO EER_CONNECTION_REFUSED:" -ForegroundColor Yellow
Write-Host "   1. Algum servi√ßo est√° tentando conectar ao MySQL (porta 3306)" -ForegroundColor Gray
Write-Host "   2. Vari√°vel de ambiente incorreta configurada" -ForegroundColor Gray
Write-Host "   3. Depend√™ncia oculta tentando conectar ao MySQL" -ForegroundColor Gray
Write-Host "   4. Cache do npm com configura√ß√µes antigas" -ForegroundColor Gray
Write-Host ""
Write-Host "üîß SOLU√á√ïES RECOMENDADAS:" -ForegroundColor Green
Write-Host "   1. Limpar cache do npm: npm cache clean --force" -ForegroundColor Gray
Write-Host "   2. Reinstalar depend√™ncias: rm -rf node_modules && npm install" -ForegroundColor Gray
Write-Host "   3. Verificar logs do navegador (F12 -> Console)" -ForegroundColor Gray
Write-Host "   4. Reiniciar completamente os servi√ßos" -ForegroundColor Gray
Write-Host ""
Write-Host "üöÄ COMANDO DE LIMPEZA R√ÅPIDA:" -ForegroundColor Green
Write-Host "   .\limpar-e-iniciar.ps1" -ForegroundColor Cyan
Write-Host ""